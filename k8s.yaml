apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
data:
  # property-like keys; each key maps to a simple value
  host: "192.168.10.1"
  debug_mode: "1"
  database: "demodb"
  profile: "stage"
  app.properties: |
    server.port=9000
    api.key=uolfbghndkks

---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind
metadata:
  name: book-api-service
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP # The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
      port: 8081 # The port that will be exposed by this service.
      targetPort: 9000 # The port to access on the pods targeted by the service.
  type: NodePort # type of the service.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-book-api #The name of deployment
spec:
  replicas: 2 # Number of replicas that will be created for this deployment
  selector: #Label selector for pods.
    matchLabels:
      app: backend
      environment: dev
  template:
    metadata:
      labels:
        app: backend
        environment: dev
    spec:
      containers:
        - name: book-api #container name
          image: joshuaenos/spring-boot-k8s
          ports:
            - containerPort: 8080
          imagePullPolicy: Always #the kubelet does not try if it is set to Never fetching the image. If the image is somehow already present locally, the kubelet attempts to start the container; otherwise, startup fails.
          livenessProbe:
            httpGet:
              port: 9000
              path: /actuator/health/liveness
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 1
          readinessProbe:
            httpGet:
              port: 9000
              path: /actuator/health/readiness
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 1
            #envFrom:
            #- configMapRef:
            #    name: db-config #refers to a configMap by its name
          args: ["--spring.profiles.active=$(APP_PROFILE)"]
          #env:
            #- name: APP_PROFILE
            #  valueFrom:
            #    configMapKeyRef:
              #    key: profile
               #   name: db-config
          volumeMounts:
            - mountPath: /etc/db/
              name: config-volume
      volumes:
        - name: config-volume
          configMap:
            name: db-config

